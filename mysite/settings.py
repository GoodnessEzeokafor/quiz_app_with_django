"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 2.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""
from django.urls import reverse_lazy
import dj_database_url # heroku

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '2b1ht@lr3-a56)cpbinf&6-yn^ifvk$r8g487(^+!ofc9gtr(i'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False


ALLOWED_HOSTS = ['*','localhost', '127.0.0.1', '.herokuapp.com'] # heroku

# # django tenant schemas
# SHARED_APPS = (
#     'tenant_schemas',  # mandatory, should always be before any django app
#     'tenant', # you must list the app where your tenant model resides in
#     'account',
#     'quiz',
#     'examiner',
#     'student',
#     'profile',

#     'django.contrib.contenttypes',

#     # everything below here is optional
#     'django.contrib.auth',
#     'django.contrib.sessions',
#     'django.contrib.sites',
#     'django.contrib.messages',
#     'django.contrib.admin',
#     # 'django.contrib.staticfiles',

# )
# TENANT_APPS = (
#     'django.contrib.contenttypes',
#     # 'django.contrib.staticfiles',

#     # your tenant-specific apps
#     'account',
#     'quiz',
#     'examiner',
#     'student',
#     'profile',
# )

# Application definition

INSTALLED_APPS = [
    # 'tenant_schemas', # mandatory, should always be before any django app
    # 'tenant',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.humanize',
    'whitenoise.runserver_nostatic', # new! { in installed_apps},



    # third party app
    # 'allauth',
    # 'allauth.account',
    # 'allauth.socialaccount',
    'markdown_deux',
    'pagedown',
    'crispy_forms',
    #local apps
    # 'account',
    'account',
    'quiz',
    'examiner',
    'student',
    'profile'

]
# TENANT_MODEL = "tenant.Organisation" # app.Model

SITE_ID = 1
CRISPY_TEMPLATE_PACK = 'bootstrap4'

MIDDLEWARE = [
    # 'tenant_schemas.middleware.TenantMiddleware', # django tenant schemas
    # 'tenant_schemas.middleware.SuspiciousTenantMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # new! { in middle_ware}

]

ROOT_URLCONF = 'mysite.urls'
# PUBLIC_SCHEMA_URLCONF = 'mysite.urls_public'


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                # 'quiz.processors.quizslug',

                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
# django  tenant schem
# TEMPLATE_CONTEXT_PROCESSORS = (
#     'django.core.context_processors.request',
#     #...
# )
TEMPLATE_LOADERS = (
    'tenant_schemas.template_loaders.FilesystemLoader',
    'django.template.loaders.filesystem.Loader',
    'django.template.loaders.app_directories.Loader',
    # 'tenant_schemas.tests.template_loader'
)
WSGI_APPLICATION = 'mysite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    'default': {
        # 'ENGINE': 'django.db.backends.sqlite3',
        # 'ENGINE': 'tenant_schemas.postgresql_backend', # django tenant schemas
        'ENGINE':'django.db.backends.postgresql',
        'NAME':'cbtapp',
        'USER':'cbtuser',
        'PASSWORD':'cbtapp123',
        'HOST':'localhost',
        'PORT':'',
        # 'AUTOCOMMIT': False,
        'TEST':{
            'NAME':'test_cbtapp', # for test
        }
        # 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

db_from_env = dj_database_url.config(conn_max_age=500) # heroku
DATABASES['default'].update(db_from_env) # heroku
 # django tenant schemas
# DATABASE_ROUTERS = (
#     'tenant_schemas.routers.TenantSyncRouter',
# )


# python manage.py migrate_schemas --shared


# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Africa/Lagos'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]
# STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage' # ne\
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') # new!



# All Auth
# AUTHENTICATION_BACKENDS = [ 'django.contrib.auth.backends.ModelBackend',
#                            'allauth.account.auth_backends.AuthenticationBackend']
# EMAIL_BACKEND so allauth can proceed to send confirmation emails
# ONLY for development/testing use console

'''
EMAIL_BACKEND='django.core.mail.backends.console.EmailBackend'
EMAIL_HOST = 'localhost'
ENAIL_PORT = 1025
EMAIL_USE_TLS= False

'''


'''
For Production
'''
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.gmail.com"
EMAIL_USE_SSL = True
EMAIL_PORT = 465
EMAIL_HOST_USER = "gootech442@gmail.com"
EMAIL_HOST_PASSWORD = "pamela000"


# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_BACKEND='django.core.mail.backends.console.EmailBackend'

# EMAIL_HOST = 'smtp.sendgrid.net'
# EMAIL_HOST_USER = 'apikey'
# EMAIL_HOST_PASSWORD = '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'
# EMAIL_PORT = 465
# # 587
# EMAIL_USE_SSL = True


# EMAIL_HOST = 'smtp.gmail.com'
# EMAIL_HOST_USER = 'your_account@gmail.com'
# EMAIL_HOST_PASSWORD = 'your_password'
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# Custom allauth settings
# Use email as the primary identifier

# ACCOUNT_AUTHENTICATION_METHOD = 'email'
# ACCOUNT_EMAIL_REQUIRED = True

# Make email verification mandatory to avoid junk email accounts

# ACCOUNT_EMAIL_VERIFICATION = 'mandatory'

# Eliminate need to provide username


# STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
# STATIC_ROOT = os.path.join(os.path.dirname(BASE_DIR), 'static_cdn')

# MEDIA_ROOT = '/data/media'
MEDIA_URL = '/media/'
# MEDIA_ROOT = os.path.join(os.path.dirname(BASE_DIR), 'media_cdn')
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')
# DEFAULT_FILE_STORAGE ='tenant_schemas.storage.TenantFileSystemStorage'



#LOGIN_REDIRECT_URL
LOGIN_REDIRECT_URL = reverse_lazy('account:user_dashboard')
LOGOUT_REDIRECT_URL = reverse_lazy('account:login')
